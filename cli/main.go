package main

import (
	"flag"
	"fmt"
	"os"
	"strings"
)

func GenerateFile(filename string, outputSuffix string) {
	//filename, _ = filepath.Abs(filename)
	//
	//fileNode, fileSet, err := ParseFile(filename)
	//if err != nil {
	//	panic(err)
	//}
	//
	//eg, err := enum.NewGenerator(fileNode, fileSet)
	//if err != nil {
	//	panic(err)
	//}
	//
	//if eg != nil {
	//
	//	buf := bytes.NewBuffer([]byte{})
	//
	//	buf.WriteString("// Code generated by https://github.com/expgo/enum DO NOT EDIT.\n\n\n")
	//
	//	// write package
	//	buf.WriteString("package " + fileNode.Name.Name)
	//	buf.WriteString("\n\n")
	//
	//	// write import
	//	importList := eg.GetImports()
	//	buf.WriteString("import (\n")
	//	for _, imp := range importList {
	//		buf.WriteString("\t\"" + imp + "\"")
	//		buf.WriteString("\n")
	//	}
	//	buf.WriteString(")\n\n")
	//
	//	err = eg.WriteConst(buf)
	//	if err != nil {
	//		panic(err)
	//	}
	//
	//	err = eg.WriteInitFunc(buf)
	//	if err != nil {
	//		panic(err)
	//	}
	//	buf.WriteString("\n")
	//
	//	err = eg.WriteBody(buf)
	//	if err != nil {
	//		panic(err)
	//	}
	//
	//	formatted, err := imports.Process(fileNode.Name.Name, buf.Bytes(), nil)
	//	if err != nil {
	//		panic(fmt.Errorf("generate: error formatting code %s\n\n%s", err, buf.String()))
	//	}
	//
	//	outFilePath := fmt.Sprintf("%s%s.go", strings.TrimSuffix(filename, filepath.Ext(filename)), outputSuffix)
	//	if strings.HasSuffix(filename, "_test.go") {
	//		outFilePath = strings.Replace(outFilePath, "_test"+outputSuffix+".go", outputSuffix+"_test.go", 1)
	//	}
	//
	//	mode := int(0o644)
	//	err = os.WriteFile(outFilePath, formatted, os.FileMode(mode))
	//	if err != nil {
	//		panic(fmt.Errorf("failed writing to file %s: %s", outFilePath, err))
	//	}
	//}
}

type Plugins []string

// String 是 flag.Value 接口的一部分，它返回值的默认文本表示形式
func (p *Plugins) String() string {
	return strings.Join(*p, ",")
}

func (p *Plugins) Set(value string) error {
	*p = append(*p, value)
	return nil
}

func main() {
	var filename string
	var fileSuffix string
	var plugins Plugins

	flag.StringVar(&filename, "file", "", "The file is used to generate the annotation file.")
	flag.StringVar(&fileSuffix, "file-suffix", "_ag", "Changes the default filename suffix of _ag to something else.")
	flag.Var(&plugins, "plugin", "Add extended plugins to the Annotation Generator.")

	flag.Parse()

	if len(filename) == 0 {
		filename, _ = os.LookupEnv("GOFILE")

		if len(filename) == 0 {
			fmt.Fprintf(os.Stdout, "Usage of %s:\n", os.Args[0])
			flag.PrintDefaults()
			return
		}
	}

	println(plugins.String())

	//GenerateFile(filename, fileSuffix)
}
