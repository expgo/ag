// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package main

import (
	"errors"
	"fmt"
)

const (
	// AGFileExe is an AGFile of type Exe.
	AGFileExe AGFile = "ag"
	// AGFileMainGo is an AGFile of type MainGo.
	AGFileMainGo AGFile = "main.go"
	// AGFileGoMod is an AGFile of type GoMod.
	AGFileGoMod AGFile = "go.mod"
	// AGFileGoSum is an AGFile of type GoSum.
	AGFileGoSum AGFile = "go.sum"
)

var ErrInvalidAGFile = errors.New("not a valid AGFile")

var _AGFileNameMap = map[string]AGFile{
	"Exe":    AGFileExe,
	"MainGo": AGFileMainGo,
	"GoMod":  AGFileGoMod,
	"GoSum":  AGFileGoSum,
}

// Name is the attribute of AGFile.
func (x AGFile) Name() string {
	if v, ok := _AGFileNameMap[string(x)]; ok {
		return string(v)
	}
	return fmt.Sprintf("AGFile(%s).Name", string(x))
}

// Val is the attribute of AGFile.
func (x AGFile) Val() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AGFile) IsValid() bool {
	_, ok := _AGFileNameMap[string(x)]
	return ok
}

// String implements the Stringer interface.
func (x AGFile) String() string {
	return x.Name()
}

// ParseAGFile converts a string to an AGFile.
func ParseAGFile(value string) (AGFile, error) {
	if x, ok := _AGFileNameMap[value]; ok {
		return x, nil
	}
	return "", fmt.Errorf("%s is %w", value, ErrInvalidAGFile)
}
