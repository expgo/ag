// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package api

import (
	"errors"
	"fmt"
)

const (
	// OrderFirst is an Order of type First.
	OrderFirst Order = 0
	// OrderHigh is an Order of type High.
	OrderHigh Order = 10
	// OrderAboveNormal is an Order of type AboveNormal.
	OrderAboveNormal Order = 20
	// OrderNormal is an Order of type Normal.
	OrderNormal Order = 30
	// OrderBelowNormal is an Order of type BelowNormal.
	OrderBelowNormal Order = 40
)

var ErrInvalidOrder = errors.New("not a valid Order")

var _OrderName = "FirstHighAboveNormalNormalBelowNormal"

var _OrderMapName = map[Order]string{
	OrderFirst:       _OrderName[0:5],
	OrderHigh:        _OrderName[5:9],
	OrderAboveNormal: _OrderName[9:20],
	OrderNormal:      _OrderName[20:26],
	OrderBelowNormal: _OrderName[26:37],
}

// Name is the attribute of Order.
func (x Order) Name() string {
	if v, ok := _OrderMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("Order(%d).Name", x)
}

// Val is the attribute of Order.
func (x Order) Val() int {
	return int(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Order) IsValid() bool {
	_, ok := _OrderMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x Order) String() string {
	return x.Name()
}

var _OrderNameMap = map[string]Order{
	_OrderName[0:5]:   OrderFirst,
	_OrderName[5:9]:   OrderHigh,
	_OrderName[9:20]:  OrderAboveNormal,
	_OrderName[20:26]: OrderNormal,
	_OrderName[26:37]: OrderBelowNormal,
}

// ParseOrder converts a string to an Order.
func ParseOrder(value string) (Order, error) {
	if x, ok := _OrderNameMap[value]; ok {
		return x, nil
	}
	return Order(0), fmt.Errorf("%s is %w", value, ErrInvalidOrder)
}
