// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package api

import (
	"errors"
	"fmt"
)

const (
	// AnnotationTypeGlobal is an AnnotationType of type global.
	AnnotationTypeGlobal AnnotationType = iota
	// AnnotationTypeType is an AnnotationType of type type.
	AnnotationTypeType
	// AnnotationTypeFunc is an AnnotationType of type func.
	AnnotationTypeFunc
	// AnnotationTypeFuncRecv is an AnnotationType of type funcRecv.
	AnnotationTypeFuncRecv
	// AnnotationTypeFuncField is an AnnotationType of type funcField.
	AnnotationTypeFuncField
)

var ErrInvalidAnnotationType = errors.New("not a valid AnnotationType")

var _AnnotationTypeName = "globaltypefuncfuncRecvfuncField"

var _AnnotationTypeMapName = map[AnnotationType]string{
	AnnotationTypeGlobal:    _AnnotationTypeName[0:6],
	AnnotationTypeType:      _AnnotationTypeName[6:10],
	AnnotationTypeFunc:      _AnnotationTypeName[10:14],
	AnnotationTypeFuncRecv:  _AnnotationTypeName[14:22],
	AnnotationTypeFuncField: _AnnotationTypeName[22:31],
}

// Name is the attribute of AnnotationType.
func (x AnnotationType) Name() string {
	if v, ok := _AnnotationTypeMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("AnnotationType(%d).Name", x)
}

// Val is the attribute of AnnotationType.
func (x AnnotationType) Val() int {
	return int(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AnnotationType) IsValid() bool {
	_, ok := _AnnotationTypeMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x AnnotationType) String() string {
	return x.Name()
}

var _AnnotationTypeNameMap = map[string]AnnotationType{
	_AnnotationTypeName[0:6]:   AnnotationTypeGlobal,
	_AnnotationTypeName[6:10]:  AnnotationTypeType,
	_AnnotationTypeName[10:14]: AnnotationTypeFunc,
	_AnnotationTypeName[14:22]: AnnotationTypeFuncRecv,
	_AnnotationTypeName[22:31]: AnnotationTypeFuncField,
}

// ParseAnnotationType converts a string to an AnnotationType.
func ParseAnnotationType(value string) (AnnotationType, error) {
	if x, ok := _AnnotationTypeNameMap[value]; ok {
		return x, nil
	}
	return AnnotationType(0), fmt.Errorf("%s is %w", value, ErrInvalidAnnotationType)
}
